1. Dada uma variável a do tipo char (um byte), escreva os trechos de código em C para: 

(a) Somente setar o bit menos significativo de a. 

R:  Para setar um bit usamos uma mascara em nivel logico baixo e setada somente no bit que queremos setar (no nosso caso como é o bit 
menos significativo entao nossa mascara sera 00000001) e em seguida fazemos a or da mascara com a variavel a. 
 a |= BIT0;             // a = a7a6a5a5a3a2a1a0 OR 00000001

(b) Somente setar dois bits de a: o menos significativo e o segundo menos significativo. 

R: a |= BIT0 + BIT1;      // a = a7a6a5a5a3a2a1a0 OR 00000011

(c) Somente zerar o terceiro bit menos significativo de a. 

R:  Para limpar um bit usamos uma mascara em nivel logico alto e zerada somente no bit que queremos limpar (no nosso caso como é o 
terceiro bit menos significativo entao nossa mascara sera 11111011, OU SEJA O INVERSO DO BIT2) e em seguida fazemos a and da mascara 
com a variavel a. 
 a &= ~BIT2;            // a = a7a6a5a5a3a2a1a0 AND 11111011

(d) Somente zerar o terceiro e o quarto bits menos significativo de a.

R: a &= ~(BIT3 + BIT2);            // a = a7a6a5a5a3a2a1a0 AND 11110011

(e) Somente inverter o bit mais significativo de a.

R: Para fazer a inversao de um bit usamos uma mascara em nivel logico baixo e setada apenas no bit em que queremos inverter, e em seguida
fazemos a xor de a com a mascara

a ^= BIT7;		   // a = a7...a2a1a0 XOR 10000000

(f) Inverter o nibble mais significativo de a, e setar o nibble menos significativo de a.


2. Considerando a placa Launchpad do MSP430, escreva o código em C para piscar os dois LEDs ininterruptamente.

Codigo para piscar LEDs 

#include <msp430g2553.h> //biblioteca da placa
#define LED1 BIT0  //declaraçao da constante 
#define LED2 BIT6  //declaraçao da constante
int main(void)
{
	WDTCTL = WDTPW | WDTHOLD;  // para o watchdog timer
	P1DIR |= LED1|LED2; //configura LED1 ou LED2 como saida (ja que vai ficar piscando)
	P1OUT |= LED1|LED2; // Leva os pinos LED1 ou LED2 para Vcc, ligando os LEDs 
	for(;;) // loop infinito
	{
		
		for (i=0;i<0xffff;i++){    
		}
		P1OUT ^= LED1|LED2; 
	}
	return 0;
}

3. Considerando a placa Launchpad do MSP430, escreva o código em C para piscar duas vezes os dois LEDs sempre que o usuário pressionar o 
botão. 

#include <msp430g2553.h> 
#define LED1 BIT0  
#define LED2 BIT6  
#define BTN  BIT3 

int main(void)
{
	WDTCTL = WDTPW | WDTHOLD; 
	PIOUT = 0;
	PIDIR = LED1 + LED2;
	for(;;)
	{
	    if(PIIN & BTN == 0)
	    {
		PIOUT |= LED1 + LED2;
		PIOUT  = 0;
		PIOUT |= LED1 + LED2;
		PIOUT  = 0;
	    }
	    else
		PIOUT = 0;

	}
} 

4. Considerando a placa Launchpad do MSP430, faça uma função em C que pisca os dois LEDs uma vez.

#include <msp430g2553.h>
#define LED1 BIT0
#define LED2 BIT1

void pisca_led ()
{
    PIDIR = LED1 + LED2; 
    PIOUT = LED1 + LED2; // Liga os LED's
    PIOUT = 0;
}


5. Reescreva o código da questão 2 usando a função da questão 4.

#include <msp430g2553.h>
#define LED1 BIT0
#define LED2 BIT1

void pisca_led() //funçao
{
    PIDIR = LED1 + LED2; 
    PIOUT = LED1 + LED2; // Liga os LED's
    PIOUT = 0;
}


void main (void)
{
	WDTCTL = WDTPW | WDTHOLD;
	PIOUT = 0;
	for(;;)
	{   
	    pisca_led()
	}
}

6. Reescreva o código da questão 3 usando a função da questão 4.

#include <msp430g2553.h>
#define LED1 BIT0
#define LED2 BIT1

void pisca_led()
{
    PIDIR = LED1 + LED2; 
    PIOUT = LED1 + LED2; // Liga os LED's
    PIOUT = 0;
}

void main (void)
{
	WDTCTL = WDTPW | WDTHOLD;
	PIOUT = 0;
	PIDIR = LED1 + LED2;
	for(;;)
	{
	    if(PIIN & BTN == 0)
	    {
		pisca_led();
		pisca_led();
	    }
	    else
		PIOUT = 0;
	}	

